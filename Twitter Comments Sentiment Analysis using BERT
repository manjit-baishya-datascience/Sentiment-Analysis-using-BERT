{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"gpu","dataSources":[{"sourceId":4140,"sourceType":"datasetVersion","datasetId":2477}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# **Importing Data**","metadata":{}},{"cell_type":"code","source":"import os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        src = os.path.join(dirname, filename)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-09-01T19:47:10.439009Z","iopub.execute_input":"2024-09-01T19:47:10.439813Z","iopub.status.idle":"2024-09-01T19:47:10.445622Z","shell.execute_reply.started":"2024-09-01T19:47:10.439767Z","shell.execute_reply":"2024-09-01T19:47:10.444694Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\n\n# set column names\ncolumns = ['target', 'ids', 'date', 'flag', 'user', 'text']\n\n# set encoding\nenc = \"ISO-8859-1\"\n\n# read csv file\ndf = pd.read_csv(src, encoding = enc, names = columns)\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-01T19:47:10.447489Z","iopub.execute_input":"2024-09-01T19:47:10.448069Z","iopub.status.idle":"2024-09-01T19:47:14.502897Z","shell.execute_reply.started":"2024-09-01T19:47:10.448037Z","shell.execute_reply":"2024-09-01T19:47:14.501959Z"},"trusted":true},"execution_count":14,"outputs":[{"execution_count":14,"output_type":"execute_result","data":{"text/plain":"   target         ids                          date      flag  \\\n0       0  1467810369  Mon Apr 06 22:19:45 PDT 2009  NO_QUERY   \n1       0  1467810672  Mon Apr 06 22:19:49 PDT 2009  NO_QUERY   \n2       0  1467810917  Mon Apr 06 22:19:53 PDT 2009  NO_QUERY   \n3       0  1467811184  Mon Apr 06 22:19:57 PDT 2009  NO_QUERY   \n4       0  1467811193  Mon Apr 06 22:19:57 PDT 2009  NO_QUERY   \n\n              user                                               text  \n0  _TheSpecialOne_  @switchfoot http://twitpic.com/2y1zl - Awww, t...  \n1    scotthamilton  is upset that he can't update his Facebook by ...  \n2         mattycus  @Kenichan I dived many times for the ball. Man...  \n3          ElleCTF    my whole body feels itchy and like its on fire   \n4           Karoli  @nationwideclass no, it's not behaving at all....  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>target</th>\n      <th>ids</th>\n      <th>date</th>\n      <th>flag</th>\n      <th>user</th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>0</td>\n      <td>1467810369</td>\n      <td>Mon Apr 06 22:19:45 PDT 2009</td>\n      <td>NO_QUERY</td>\n      <td>_TheSpecialOne_</td>\n      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>0</td>\n      <td>1467810672</td>\n      <td>Mon Apr 06 22:19:49 PDT 2009</td>\n      <td>NO_QUERY</td>\n      <td>scotthamilton</td>\n      <td>is upset that he can't update his Facebook by ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>0</td>\n      <td>1467810917</td>\n      <td>Mon Apr 06 22:19:53 PDT 2009</td>\n      <td>NO_QUERY</td>\n      <td>mattycus</td>\n      <td>@Kenichan I dived many times for the ball. Man...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>0</td>\n      <td>1467811184</td>\n      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n      <td>NO_QUERY</td>\n      <td>ElleCTF</td>\n      <td>my whole body feels itchy and like its on fire</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>0</td>\n      <td>1467811193</td>\n      <td>Mon Apr 06 22:19:57 PDT 2009</td>\n      <td>NO_QUERY</td>\n      <td>Karoli</td>\n      <td>@nationwideclass no, it's not behaving at all....</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# **Preprocessing Data**","metadata":{}},{"cell_type":"code","source":"# getting data info\ndf.info()","metadata":{"execution":{"iopub.status.busy":"2024-09-01T19:47:14.504333Z","iopub.execute_input":"2024-09-01T19:47:14.504731Z","iopub.status.idle":"2024-09-01T19:47:15.110101Z","shell.execute_reply.started":"2024-09-01T19:47:14.504695Z","shell.execute_reply":"2024-09-01T19:47:15.109229Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 1600000 entries, 0 to 1599999\nData columns (total 6 columns):\n #   Column  Non-Null Count    Dtype \n---  ------  --------------    ----- \n 0   target  1600000 non-null  int64 \n 1   ids     1600000 non-null  int64 \n 2   date    1600000 non-null  object\n 3   flag    1600000 non-null  object\n 4   user    1600000 non-null  object\n 5   text    1600000 non-null  object\ndtypes: int64(2), object(4)\nmemory usage: 73.2+ MB\n","output_type":"stream"}]},{"cell_type":"code","source":"# getting data shape\ndf.shape","metadata":{"execution":{"iopub.status.busy":"2024-09-01T19:47:15.112128Z","iopub.execute_input":"2024-09-01T19:47:15.112483Z","iopub.status.idle":"2024-09-01T19:47:15.118208Z","shell.execute_reply.started":"2024-09-01T19:47:15.112458Z","shell.execute_reply":"2024-09-01T19:47:15.117219Z"},"trusted":true},"execution_count":16,"outputs":[{"execution_count":16,"output_type":"execute_result","data":{"text/plain":"(1600000, 6)"},"metadata":{}}]},{"cell_type":"code","source":"# taking a subset of the entire dataset for resource constraints\ndf = df[['text']].head(10000)\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-01T19:47:15.119294Z","iopub.execute_input":"2024-09-01T19:47:15.119560Z","iopub.status.idle":"2024-09-01T19:47:15.159363Z","shell.execute_reply.started":"2024-09-01T19:47:15.119537Z","shell.execute_reply":"2024-09-01T19:47:15.158508Z"},"trusted":true},"execution_count":17,"outputs":[{"execution_count":17,"output_type":"execute_result","data":{"text/plain":"                                                text\n0  @switchfoot http://twitpic.com/2y1zl - Awww, t...\n1  is upset that he can't update his Facebook by ...\n2  @Kenichan I dived many times for the ball. Man...\n3    my whole body feels itchy and like its on fire \n4  @nationwideclass no, it's not behaving at all....","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>is upset that he can't update his Facebook by ...</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>@Kenichan I dived many times for the ball. Man...</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>my whole body feels itchy and like its on fire</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>@nationwideclass no, it's not behaving at all....</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"## **Checking GPU Availability**","metadata":{}},{"cell_type":"code","source":"import torch\n\nprint(torch.cuda.is_available())\nprint(torch.cuda.current_device())\nprint(torch.cuda.get_device_name(0))","metadata":{"execution":{"iopub.status.busy":"2024-09-01T19:47:15.160495Z","iopub.execute_input":"2024-09-01T19:47:15.160761Z","iopub.status.idle":"2024-09-01T19:47:18.333037Z","shell.execute_reply.started":"2024-09-01T19:47:15.160738Z","shell.execute_reply":"2024-09-01T19:47:18.332092Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"True\n0\nTesla P100-PCIE-16GB\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## **Importing BERT Model**","metadata":{}},{"cell_type":"code","source":"from transformers import AutoTokenizer, AutoModelForSequenceClassification\n\n# Set GPU when available\ndevice = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n\n# Load model directly\ntokenizer = AutoTokenizer.from_pretrained(\"nlptown/bert-base-multilingual-uncased-sentiment\")\nmodel = AutoModelForSequenceClassification.from_pretrained(\"nlptown/bert-base-multilingual-uncased-sentiment\")","metadata":{"execution":{"iopub.status.busy":"2024-09-01T19:47:18.334271Z","iopub.execute_input":"2024-09-01T19:47:18.334678Z","iopub.status.idle":"2024-09-01T19:47:24.949995Z","shell.execute_reply.started":"2024-09-01T19:47:18.334655Z","shell.execute_reply":"2024-09-01T19:47:24.949213Z"},"trusted":true},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":"tokenizer_config.json:   0%|          | 0.00/39.0 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"76a5f6d6f63f40a784e938f4ff575d19"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"config.json:   0%|          | 0.00/953 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"33059c9cc2474e3b80d7dc01816f746d"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"vocab.txt:   0%|          | 0.00/872k [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"e27a5ad530b346c78d5360137a2a97f3"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"special_tokens_map.json:   0%|          | 0.00/112 [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"75eac39e0a1f42b3be0a00256196634e"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"pytorch_model.bin:   0%|          | 0.00/669M [00:00<?, ?B/s]","application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1f673dbd6c534ab7835df1c0b648a113"}},"metadata":{}},{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/torch/_utils.py:831: UserWarning: TypedStorage is deprecated. It will be removed in the future and UntypedStorage will be the only storage class. This should only matter to you if you are using storages directly.  To access UntypedStorage directly, use tensor.untyped_storage() instead of tensor.storage()\n  return self.fget.__get__(instance, owner)()\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## **Transfering data to GPU**","metadata":{}},{"cell_type":"code","source":"# Move the model to the appropriate device\nmodel.to(device)","metadata":{"execution":{"iopub.status.busy":"2024-09-01T19:47:24.951017Z","iopub.execute_input":"2024-09-01T19:47:24.951448Z","iopub.status.idle":"2024-09-01T19:47:25.260444Z","shell.execute_reply.started":"2024-09-01T19:47:24.951423Z","shell.execute_reply":"2024-09-01T19:47:25.259566Z"},"trusted":true},"execution_count":20,"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"BertForSequenceClassification(\n  (bert): BertModel(\n    (embeddings): BertEmbeddings(\n      (word_embeddings): Embedding(105879, 768, padding_idx=0)\n      (position_embeddings): Embedding(512, 768)\n      (token_type_embeddings): Embedding(2, 768)\n      (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n      (dropout): Dropout(p=0.1, inplace=False)\n    )\n    (encoder): BertEncoder(\n      (layer): ModuleList(\n        (0-11): 12 x BertLayer(\n          (attention): BertAttention(\n            (self): BertSdpaSelfAttention(\n              (query): Linear(in_features=768, out_features=768, bias=True)\n              (key): Linear(in_features=768, out_features=768, bias=True)\n              (value): Linear(in_features=768, out_features=768, bias=True)\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n            (output): BertSelfOutput(\n              (dense): Linear(in_features=768, out_features=768, bias=True)\n              (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n              (dropout): Dropout(p=0.1, inplace=False)\n            )\n          )\n          (intermediate): BertIntermediate(\n            (dense): Linear(in_features=768, out_features=3072, bias=True)\n            (intermediate_act_fn): GELUActivation()\n          )\n          (output): BertOutput(\n            (dense): Linear(in_features=3072, out_features=768, bias=True)\n            (LayerNorm): LayerNorm((768,), eps=1e-12, elementwise_affine=True)\n            (dropout): Dropout(p=0.1, inplace=False)\n          )\n        )\n      )\n    )\n    (pooler): BertPooler(\n      (dense): Linear(in_features=768, out_features=768, bias=True)\n      (activation): Tanh()\n    )\n  )\n  (dropout): Dropout(p=0.1, inplace=False)\n  (classifier): Linear(in_features=768, out_features=5, bias=True)\n)"},"metadata":{}}]},{"cell_type":"markdown","source":"## **Defining function to predict sentiment**","metadata":{}},{"cell_type":"code","source":"def sentiment_score(review):\n    # Tokenize the input and move the tokens to the correct device (GPU or CPU)\n    tokens = tokenizer.encode(review, return_tensors='pt').to(device)\n    \n    # Perform the model prediction\n    result = model(tokens)\n    \n    # Return the sentiment score\n    return int(torch.argmax(result.logits)) + 1","metadata":{"execution":{"iopub.status.busy":"2024-09-01T19:47:25.262844Z","iopub.execute_input":"2024-09-01T19:47:25.263125Z","iopub.status.idle":"2024-09-01T19:47:25.268316Z","shell.execute_reply.started":"2024-09-01T19:47:25.263101Z","shell.execute_reply":"2024-09-01T19:47:25.267372Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"# make predictions\ndf['sentiment'] = df['text'].apply(lambda x: sentiment_score(x[:512]))\ndf.head()","metadata":{"execution":{"iopub.status.busy":"2024-09-01T19:47:25.269598Z","iopub.execute_input":"2024-09-01T19:47:25.269918Z","iopub.status.idle":"2024-09-01T19:49:00.365109Z","shell.execute_reply.started":"2024-09-01T19:47:25.269888Z","shell.execute_reply":"2024-09-01T19:49:00.364086Z"},"trusted":true},"execution_count":22,"outputs":[{"execution_count":22,"output_type":"execute_result","data":{"text/plain":"                                                text  sentiment\n0  @switchfoot http://twitpic.com/2y1zl - Awww, t...          1\n1  is upset that he can't update his Facebook by ...          1\n2  @Kenichan I dived many times for the ball. Man...          1\n3    my whole body feels itchy and like its on fire           2\n4  @nationwideclass no, it's not behaving at all....          1","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>sentiment</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>@switchfoot http://twitpic.com/2y1zl - Awww, t...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>is upset that he can't update his Facebook by ...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>@Kenichan I dived many times for the ball. Man...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>my whole body feels itchy and like its on fire</td>\n      <td>2</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>@nationwideclass no, it's not behaving at all....</td>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"# **THANK YOU**\n---","metadata":{}}]}